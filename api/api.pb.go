// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Empty
	StatusMessage
	URLRequest
	CrawlData
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusMessage struct {
	ServerResp string `protobuf:"bytes,1,opt,name=serverResp" json:"serverResp,omitempty"`
}

func (m *StatusMessage) Reset()                    { *m = StatusMessage{} }
func (m *StatusMessage) String() string            { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()               {}
func (*StatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusMessage) GetServerResp() string {
	if m != nil {
		return m.ServerResp
	}
	return ""
}

type URLRequest struct {
	Url         string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Parallelism int64  `protobuf:"varint,2,opt,name=parallelism" json:"parallelism,omitempty"`
}

func (m *URLRequest) Reset()                    { *m = URLRequest{} }
func (m *URLRequest) String() string            { return proto.CompactTextString(m) }
func (*URLRequest) ProtoMessage()               {}
func (*URLRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *URLRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *URLRequest) GetParallelism() int64 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

type CrawlData struct {
	SiteTree []byte `protobuf:"bytes,1,opt,name=siteTree,proto3" json:"siteTree,omitempty"`
}

func (m *CrawlData) Reset()                    { *m = CrawlData{} }
func (m *CrawlData) String() string            { return proto.CompactTextString(m) }
func (*CrawlData) ProtoMessage()               {}
func (*CrawlData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CrawlData) GetSiteTree() []byte {
	if m != nil {
		return m.SiteTree
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*StatusMessage)(nil), "StatusMessage")
	proto.RegisterType((*URLRequest)(nil), "URLRequest")
	proto.RegisterType((*CrawlData)(nil), "CrawlData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Crawler service

type CrawlerClient interface {
	StartCrawl(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*StatusMessage, error)
	StopCrawl(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*StatusMessage, error)
	CrawlList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CrawlData, error)
}

type crawlerClient struct {
	cc *grpc.ClientConn
}

func NewCrawlerClient(cc *grpc.ClientConn) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) StartCrawl(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := grpc.Invoke(ctx, "/Crawler/StartCrawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) StopCrawl(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := grpc.Invoke(ctx, "/Crawler/StopCrawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerClient) CrawlList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CrawlData, error) {
	out := new(CrawlData)
	err := grpc.Invoke(ctx, "/Crawler/CrawlList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crawler service

type CrawlerServer interface {
	StartCrawl(context.Context, *URLRequest) (*StatusMessage, error)
	StopCrawl(context.Context, *URLRequest) (*StatusMessage, error)
	CrawlList(context.Context, *Empty) (*CrawlData, error)
}

func RegisterCrawlerServer(s *grpc.Server, srv CrawlerServer) {
	s.RegisterService(&_Crawler_serviceDesc, srv)
}

func _Crawler_StartCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).StartCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crawler/StartCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).StartCrawl(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_StopCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).StopCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crawler/StopCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).StopCrawl(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crawler_CrawlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).CrawlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crawler/CrawlList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).CrawlList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCrawl",
			Handler:    _Crawler_StartCrawl_Handler,
		},
		{
			MethodName: "StopCrawl",
			Handler:    _Crawler_StopCrawl_Handler,
		},
		{
			MethodName: "CrawlList",
			Handler:    _Crawler_CrawlList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xbb, 0x16, 0x5b, 0x77, 0xaa, 0x22, 0x73, 0x2a, 0x7b, 0x90, 0x35, 0x17, 0x8b, 0x42,
	0x04, 0x7d, 0x01, 0x41, 0xbd, 0xd5, 0x4b, 0x56, 0x1f, 0x60, 0x84, 0x41, 0x02, 0x29, 0x1b, 0x67,
	0x66, 0x15, 0x1f, 0xc0, 0xf7, 0x16, 0x43, 0xa9, 0xeb, 0xcd, 0x5b, 0xfe, 0x9f, 0x8f, 0xf0, 0xcd,
	0x0f, 0x35, 0xe5, 0xe8, 0xb3, 0xf4, 0xd6, 0xbb, 0x39, 0xec, 0x3f, 0x6c, 0xb2, 0x7d, 0xba, 0x2b,
	0x38, 0xea, 0x8c, 0x6c, 0xd0, 0x47, 0x56, 0xa5, 0x57, 0xc6, 0x53, 0x00, 0x65, 0x79, 0x67, 0x09,
	0xac, 0x79, 0x59, 0xb5, 0xd5, 0xaa, 0x0e, 0xa3, 0xc6, 0xdd, 0x02, 0x3c, 0x87, 0x75, 0xe0, 0xb7,
	0x81, 0xd5, 0xf0, 0x04, 0xa6, 0x83, 0xa4, 0x2d, 0xf6, 0xf3, 0xc4, 0x16, 0x16, 0x99, 0x84, 0x52,
	0xe2, 0x14, 0x75, 0xb3, 0xdc, 0x6b, 0xab, 0xd5, 0x34, 0x8c, 0x2b, 0x77, 0x0e, 0xf5, 0x9d, 0xd0,
	0x47, 0xba, 0x27, 0x23, 0x6c, 0xe0, 0x40, 0xa3, 0xf1, 0x93, 0x30, 0x97, 0x5f, 0x0e, 0xc3, 0x2e,
	0x5f, 0x7f, 0x55, 0x30, 0x2f, 0x24, 0x0b, 0x5e, 0x02, 0x74, 0x46, 0x62, 0x25, 0xe3, 0xc2, 0xff,
	0x3a, 0x34, 0xc7, 0xfe, 0xcf, 0x05, 0x6e, 0x82, 0x17, 0x50, 0x77, 0xd6, 0xe7, 0x7f, 0xb1, 0x67,
	0x5b, 0x9b, 0x75, 0x54, 0xc3, 0x99, 0x2f, 0xab, 0x34, 0xe0, 0x77, 0x86, 0x6e, 0xf2, 0x32, 0x2b,
	0x9b, 0xdd, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0xef, 0xf3, 0xf9, 0x6e, 0x40, 0x01, 0x00, 0x00,
}
